{"version":3,"sources":["components/Header/Header.js","components/ResumeContainer/ResumeContainer.js","pages/WelcomePage/WelcomePage.js","pages/ContactsPage/ContactsPage.js","pages/AboutPage/AboutPage.js","App.js","serviceWorker.js","index.js","resume.pdf"],"names":["Header","className","to","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ResumeContainer","data","Resume","WelcomePage","ContactsPage","AboutPage","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6SAIe,SAASA,IACpB,OACI,yBAAKC,UAAU,+CACX,yBAAKA,UAAU,wCAEX,kBAAC,IAAD,CAAMC,GAAG,aAAY,uBAAGD,UAAU,eAAeE,KAAK,KAAjC,WACrB,4BAAQF,UAAU,iBAAiBG,KAAK,SAASC,cAAY,WAAWC,cAAY,UAC5EC,gBAAc,yBAAyBC,gBAAc,QACrDC,aAAW,qBACf,0BAAMR,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BS,GAAG,UACzC,wBAAIT,UAAU,cACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,oBAAoBD,UAAU,YAAvC,aAEJ,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,oBAAoBD,UAAU,YAAvC,iB,0BClBb,SAASU,IACpB,OACI,kBAAC,WAAD,KACI,yBAAKV,UAAU,0CACX,yBAAKA,UAAU,eAAc,4BAAI,oFACjC,yBAAKA,UAAU,aACX,4BAAQA,UAAU,aAAaW,KAAMC,IAAQT,KAAK,mBAC9C,uBAAGD,KAAMU,KACL,0KAIZ,yBAAKZ,UAAU,eACX,uBAAGE,KAAMU,KAAT,0ICdL,SAASC,IACpB,OACI,kBAAC,WAAD,KACI,6CACA,kBAACH,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,OCRG,SAASI,IACpB,OACI,kBAAC,WAAD,KACI,+C,MCFG,SAASC,IACpB,OACI,kBAAC,WAAD,KACI,4CCkBGC,MAlBf,WACI,OACI,kBAAC,IAAD,KACI,yBAAKhB,UAAU,mBACX,yBAAKA,UAAU,OACX,kBAACD,EAAD,MAEA,yBAAKC,UAAU,qBACX,kBAAC,IAAD,CAAOiB,KAAK,YAAYC,OAAK,EAACC,UAAWN,IACzC,kBAAC,IAAD,CAAOI,KAAK,oBAAoBE,UAAWJ,IAC3C,kBAAC,IAAD,CAAOE,KAAK,oBAAoBE,UAAWL,SCJ/CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.c02e0c83.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './header.css';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"col-md-3 col-lg-2 navbar-container bg-light\">\r\n            <nav className=\"navbar navbar-expand-md navbar-light\">\r\n\r\n                <Link to=\"/my-site/\"><a className=\"navbar-brand\" href=\" \">Navbar</a></Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar\"\r\n                        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"/>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbar\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/my-site/about-me\" className=\"nav-link\">About me</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/my-site/contacts\" className=\"nav-link\">Contacts</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </nav>\r\n        </div>\r\n    );\r\n}","import React, {Fragment} from 'react';\r\nimport Resume from './../../resume.pdf';\r\nimport './resumeContainer.css';\r\n\r\nexport default function ResumeContainer() {\r\n    return(\r\n        <Fragment>\r\n            <div className=\"card border-primary mb-3 pdf-container\">\r\n                <div className=\"card-header\"><h5><strong>Резюме с HH</strong></h5></div>\r\n                <div className=\"card-body\">\r\n                    <object className=\"pdf-viewer\" data={Resume} type=\"application/pdf\">\r\n                        <a href={Resume}>\r\n                            <button>Альтернативный вариант pdf</button>\r\n                        </a>\r\n                    </object>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <a href={Resume}>Альтернативный вариант pdf</a>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport {ResumeContainer} from \"../../components\";\r\n\r\nexport default function WelcomePage() {\r\n    return(\r\n        <Fragment>\r\n            <h3>Welcome page!</h3>\r\n            <ResumeContainer />\r\n            <ResumeContainer />\r\n            <ResumeContainer />\r\n            <ResumeContainer />\r\n        </Fragment>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\n\r\nexport default function ContactsPage() {\r\n    return(\r\n        <Fragment>\r\n            <h3>Contacts page!</h3>\r\n        </Fragment>\r\n    );\r\n}","import React, {Fragment} from 'react';\r\nimport './aboutPage.css';\r\n\r\nexport default function AboutPage() {\r\n    return(\r\n        <Fragment>\r\n            <h3>About page!</h3>\r\n        </Fragment>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {WelcomePage, AboutPage, ContactsPage} from \"./pages\";\nimport {Header} from \"./components\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <Header/>\n\n                    <div className=\"col content-block\">\n                        <Route path=\"/my-site/\" exact component={WelcomePage}/>\n                        <Route path=\"/my-site/about-me\" component={AboutPage}/>\n                        <Route path=\"/my-site/contacts\" component={ContactsPage}/>\n                    </div>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/resume.38b52eaf.pdf\";"],"sourceRoot":""}